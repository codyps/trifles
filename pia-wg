#! /bin/bash
set -x
set -euf -o pipefail

PIA_HOME=/etc/pia
. "$PIA_HOME"/account

PIA_TOKEN="$(curl -s -u "$PIA_USERNAME:$PIA_PASSWORD" \
	"https://privateinternetaccess.com/gtoken/generateToken" | jq -r '.token')"

pia_servers="$(curl --max-time 15 'https://serverlist.piaservers.net/vpninfo/servers/v6' | head -1)"

# remote ips
country_json="$(printf "%s" "$pia_servers" | jq '.regions[] | select (.country == "NO")')"
#WG_HOSTNAME=$(printf "%s" "$country_json" | jq -r .dns)

servers_json="$(printf "%s" "$country_json" | jq '.servers.wg')"
server_json="$(printf "%s" "$servers_json" | jq '.[0]')"
# ports


if [ $# -eq 1 ]; then
	WG_PRIVKEY="$1"
else
	WG_PRIVKEY="$(wg genkey)"
fi
WG_PUBKEY="$(printf "%s" "$WG_PRIVKEY" | wg pubkey)"

WG_SERVER_IP=$(printf "%s" "$server_json" | jq -r .ip)
WG_HOSTNAME=$(printf "%s" "$server_json" | jq -r .cn)

wireguard_json="$(curl -vv -G \
  --connect-to "$WG_HOSTNAME::$WG_SERVER_IP:" \
  --cacert "$PIA_HOME/ca.rsa.4096.crt" \
  --data-urlencode "pt=${PIA_TOKEN}" \
  --data-urlencode "pubkey=$WG_PUBKEY" \
  "https://${WG_HOSTNAME}:1337/addKey" )"

if [ "$(echo "$wireguard_json" | jq -r '.status')" != "OK" ];then
	echo "addKey failed: $wireguard_json"
	exit 1
fi

#mkdir -p /run/pia/
#touch /run/pia/pia.key
#chmod 0640 /run/pia/pia.key
#chown root:systemd-network /run/pia/pia.key
#echo "$WG_PRIVKEY" >/run/pia/pia.key

WG_ADDR="$(echo "$wireguard_json" | jq -r .peer_ip)"
WG_SERVER_PUBKEY="$(echo "$wireguard_json" | jq -r .server_key)"
WG_SERVER_PORT="$(echo "$wireguard_json" | jq -r .server_port)"
WG_SERVER_ENDPOINT="$WG_SERVER_IP:$WG_SERVER_PORT"

WG_SERVER_DNS="$(echo "$wireguard_json" | jq -r '.dns_servers[0]')"

cat <<EOF
## 10-pia.netdev {
[NetDev]
Name = pia
Kind = wireguard

[WireGuard]
PrivateKey = $WG_PRIVKEY

[WireGuardPeer]
PublicKey = $WG_SERVER_PUBKEY
AllowedIPs = 0.0.0.0/0
Endpoint = $WG_SERVER_ENDPOINT
PersistentKeepalive = 25

## }
EOF
cat <<EOF
## 10-pia.network {

[Match]
Name=pia

[Network]
Address = $WG_ADDR
DNSSEC = false

# FIXME: use array?
DNS = $WG_SERVER_DNS

## }
EOF


: ${WG_QUICK_CONF_OUT_FILE:=/dev/stdout}

cat <<EOF >"$WG_QUICK_CONF_OUT_FILE"
### BEGIN QUICK CONFIG
[Interface]
Address = $WG_ADDR
PrivateKey = $WG_PRIVKEY

[Peer]
PersistentKeepalive = 25
PublicKey = $WG_SERVER_PUBKEY
AllowedIPs = 0.0.0.0/0
Endpoint = $WG_SERVER_ENDPOINT
### END QUICK CONFIG
EOF

cat <<EOF
## OPENWRT START
uci set network.pia.listen_port='1337'
uci set network.pia.private_key='$WG_PRIVKEY'
uci del network.pia.addresses
uci add_list network.pia.addresses='$WG_ADDR'

# FIXME: need to delete existing PEERS!
uci add network wireguard_pia # =cfg1179a8
uci set network.@wireguard_pia[-1].description='pia main'
uci set network.@wireguard_pia[-1].public_key='$WG_SERVER_PUBKEY'
uci add_list network.@wireguard_pia[-1].allowed_ips='0.0.0.0/0'
uci set network.@wireguard_pia[-1].endpoint_host='$WG_SERVER_IP'
uci set network.@wireguard_pia[-1].endpoint_port='$WG_SERVER_PORT'
uci set network.@wireguard_pia[-1].persistent_keepalive='25'
## OPENWRT END
EOF

: ${NAMESPACED_WIREGUARD_VPN_CONF_OUT_FILE:=/dev/stdout}

echo "## /etc/namespaced-wireguard-vpn/namespaced-wireguard-vpn.conf {"
cat <<EOF >"$NAMESPACED_WIREGUARD_VPN_CONF_OUT_FILE"
WIREGUARD_IP_ADDRESSES="$WG_ADDR"
WIREGUARD_PRIVATE_KEY="$WG_PRIVKEY"
WIREGUARD_VPN_PUBLIC_KEY="$WG_SERVER_PUBKEY"
WIREGUARD_ENDPOINT="$WG_SERVER_ENDPOINT"
EOF

echo "## }"
