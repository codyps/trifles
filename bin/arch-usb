#!/bin/bash
set -Eeuf -o pipefail

backtrace () {
    local deptn=${#FUNCNAME[@]}

    for ((i=1; i<$deptn; i++)); do
        local func="${FUNCNAME[$i]}"
        local line="${BASH_LINENO[$((i-1))]}"
        local src="${BASH_SOURCE[$((i-1))]}"
        printf '%*s' $i '' # indent
        echo "at: $func(), $src, line $line"
    done
}

trace_top_caller () {
    local func="${FUNCNAME[1]}"
    local line="${BASH_LINENO[0]}"
    local src="${BASH_SOURCE[0]}"
    echo "  called from: $func(), $src, line $line"
}

trap 'trace_top_caller' ERR

p() {
	printf "arch-usb: %s\n" "$1"
}

e() {
	printf "arch-usb: Error: %s\n" "$1"
	exit 1
}

if [ $# -ne 3 ]; then
	>&2 echo "usage: $0 <device> <name> {install|chroot}"
	exit 1
fi

dev="$1"
name="$2"
act="$3"
bdev="$(basename "$dev")"
p "name=$dev"
p "device=$dev"

if [ -b "$dev" ]; then
	p "block device"
else
	e "device must be a block device"
fi

if [ -w "$dev" ]; then
	p "writable"
else
	e "device is not writable, check permisions"
fi

bsz=$(blockdev --getbsz "$dev")
if [ "$bsz" != 4096 ]; then
	e "partition layout tuned for 4096 byte sectors, but drive has $bsz byte sectors"
fi

a_format() {
	# partition device:
	# gpt
	#  2M bios boot
	#  11M EFI system
	#  111M linux extended boot
	# parition starts are algined to increasing multiples of 1024 _sectors_
	sfdisk -w always -W always "$dev" <<EOF
label: gpt

name=biosboot, start=        2048, size=        4097, type=21686148-6449-6E6F-744E-656564454649, bootable, attrs=LegacyBIOSBootable
name=EFI,      start=        8192, size=       22529, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B
name=boot,     start=       32768, size=      227329, type=BC13C2FF-59E6-4262-A352-B275FD6F7172
name=root,     start=      262144,                    type=0FC63DAF-8483-4772-8E79-3D69D8477DE4
EOF

	udevadm settle

	# 1 is unformatted
	mkfs.vfat "${dev}2"
	mkfs.ext4 "${dev}3"

	trap c_bind EXIT

	# defaults to 1MiB align
	cryptsetup luksFormat "${dev}4" -c aes-xts-plain64
	cryptsetup luksOpen "${dev}4" "$bdev"

	pvcreate -ff "/dev/mapper/$bdev"
	vgcreate "$name" "/dev/mapper/$bdev" 
	lvcreate -n root -L 7G "$name"

	mkfs.ext4 "/dev/$name/root"
}

c_bind() {
	lvchange -an "$name" || true
	cryptsetup close "$bdev" || true
}

c_mount() {
	umount "/mnt/$name/boot/EFI" || true
	umount "/mnt/$name/boot" || true
	umount "/mnt/$name" || true
	rmdir  "/mnt/$name" || true
	c_bind
}

a_mount() {
	trap c_mount EXIT

	mkdir /mnt/$name || { rmdir /mnt/$name && mkdir /mnt/$name ; }

	mount "/dev/$name/root" "/mnt/$name"
	mkdir -p "/mnt/$name/boot"
	mount "${dev}3" "/mnt/$name/boot"
	mkdir -p "/mnt/$name/boot/EFI"
	mount "${dev}2" "/mnt/$name/boot/EFI"
}

a_bind() {
	trap c_bind EXIT
	cryptsetup luksOpen "${dev}4" "$bdev"
	vgchange -ay "$name"
}

a_install() {
	# XXX: assumes we're bind=true
	a_mount
	m="/mnt/$name"
	pacstrap "$m" base base-devel xorg tmux i3 slim grub bash-completion ccache openssh sudo htop vim linux-headers wpa_supplicant mpv pulseaudio firefox rxvt-unicode
	ln -sf /usr/lib/systemd/resolv.conf "$m"/etc/resolv.conf
	cat >"$m"/etc/systemd/network/50-wired.network <<EOF
[Match]
Name=en*

[Network]
DHCP=ipv4
EOF

	cat >"$m"/etc/systemd/network/51-wireless.network <<EOF
[Match]
Name=wl*

[Network]
DHCP=ipv4
EOF

	# Allow wheel's nopasswd sudo
	cat >>"$m"/etc/sudoers.d/50-wheel <<EOF
%wheel ALL=(ALL) NOPASSWD: ALL
EOF

	cat >"$m/etc/profile.d/vim.sh" <<EOF
export EDITOR="/bin/vim"
EOF

	cat >"$m/etc/profile.d/ccache.sh" <<EOF
export PATH="/usr/lib/ccache/bin:\$PATH"
EOF

	cat >"$m/etc/slim.conf" <<EOF
default_user y
focus_password yes
auto_login yes
EOF

	# set HOOKS for encrypt/lvm2
	sed -i "$m/etc/mkinitcpio.conf" \
	    -e 's/HOOKS=.*/HOOKS=(base udev autodetect modconf block keyboard encrypt lvm2 filesystems fsck)/'
	
	# edit GRUB_CMDLINE_LINUX for cryptdevice uuid
	uuid="$(blkid "${dev}4" -o value | head -n1)"
	sed -i "$m/etc/default/grub" \
	    -e 's/GRUB_CMDLINE_LINUX=.*/GRUB_CMDLINE_LINUX="cryptdevice=UUID='$uuid':'$name'"/'

	genfstab -U "$m" >>"$m/etc/fstab"

	mkdir -p "$m/etc/systemd/system.conf.d"
	cat >"$m/etc/systemd/system.conf.d/50-y.conf" <<EOF
[Manager]
DefaultTimeoutStartSec=30s
DefaultTimeoutStopSec=30s
EOF

	cat >"$m"/setup <<EOF
#! /bin/bash
set -Eeuf -o pipefail
useradd -m -G wheel y
systemctl enable systemd-resolved systemd-networkd systemd-timesyncd sshd.socket
grub-install --no-nvram --target i386-pc "$dev"
grub-install --no-nvram --target x86_64-efi
grub-mkconfig -o /boot/grub/grub.cfg
mkinitcpio -P
echo "Set root password:"
passwd
echo "Set user (y) password:"
passwd y
sudo -u y /setup-pacaur
EOF
	cp $(dirname $0)/arch-setup-pacaur "$m"/setup-pacaur
	chmod +x "$m"/setup-pacaur
	chmod +x "$m"/setup

	arch-chroot "$m" /setup
	rm -f "$m"/setup "$m"/setup-pacaur

	cat >"$m"/home/y/.xinitrc <<EOF
#!/bin/sh
exec i3
EOF
}

a_chroot() {
	a_bind
	a_mount
	arch-chroot "/mnt/$name"	
}

case "$act" in
i*)
	a_format
	a_install
	;;
c*)
	a_chroot
	;;
*)
	e "unrecognized action: $act"
esac
