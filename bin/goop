#! /bin/sh

# Messsages:
#  I - info: just so you know.
#  T - todo: tell the devs to get their act together.
#  E - error: stuff is broken, we're continuing, but some expected action was not taken.
#  F - fatal error/failure: cannot continue at all
#  W - warn: things that should have worked but didn't, and aren't any cause for immediate concern

# TODO:
# use command line to get
#	- GOOP_CONF
#	- GOOP_DIR
# allow configuration of
#	- multiple goop directories ("pots"? "landfills"? "tanks"? "heaps"?).
#       - deciding where to drop the files.
# keep a log of the actions taken so that we can roll them back
# [alternately?] impliment a 'restore' mechanism.
# Use a hash based file store & hardlink from there.
# Plan for handling reference counting:
# - we cannont just use the inode's refcount as non-goop links to goop items could exsist.
# Inverted links: quickly list all places the file exsists.
# Track trees instead of preserving the filestructure of stored files.
# Add tools to query the goop store.
# What constitutes a unque file? new files could share the same path as old
# ones. Sequenct of files? What about a snapshot in time? Time when the file
# was added to goop, or time the file has listed as ctime

ensure_dir () {
	if ! [ -d "$1" ]; then
		if [ -e "$1" ]; then
			echo "F: $2 \"$1\" is not a directory." >&2
			exit 2
		else
			echo "I: creating new $2 \"$1\"." >&2
			mkdir -p "$1" || {
				echo "F: failed to create $2 \"$1\"." >&2
				exit 1
			}
		fi
	fi
}

append_to_file () {
	f=$1; shift
	( flock 9
	  echo "$*" >&9
	) >>$f
}

GOOP_CONF=$HOME/.config/goop
if [ -r "$GOOP_CONF" ]; then
	. "$GOOP_CONF"
fi

if [ -z "$GOOP_DIR" ]; then
	GOOP_DIR="$HOME/.goop/"
fi

if [ $# -eq 0 ]; then
	echo "usage: goop [file] [file]..."
	exit 1
fi

ensure_dir "$GOOP_DIR" "goop directory"
dir_date=`date +%F` # Y-m-d
goop_dest="$GOOP_DIR"/"$dir_date"
ensure_dir "$goop_dest" "date directory"
goop_dest_lock="$GOOP_DIR"/"$dir_date"/.lock
goop_action_log="$GOOP_DIR"/actions.log

(
flock 9
goop="$1"
while [ $# -gt 0 ]; do
	# Only support files for now.
	#if ( ! [ -f "$goop" ] ) || [ -h "$goop" ]; then
	#	echo "E: cannot handle non-regular file \"$goop\"."
	#	continue
	#fi

	#file_hash=$(sha512 "$goop")
	file_attrs=$(stat "$goop" 2>/dev/null)
	goop_name=$(basename "$goop")
	origin=$(readlink -f "$goop")
	goop_file_dest="$goop_dest/$goop_name"

	# Handle file conflicts
	# TODO: make the manner in which conflicts are handled configurable.
	# possible ways to differentiate
	# - file size [possibly rename exsisting file to also indicate file size?]
	# - raw content [few bytes of sha1 or some other hash]
	# - type as reported by `file`
	# - $file___N , or with another sep than "___"
	# - path where file originated
	# - device file originally came from
	# - creation/modification time

	if ! [ -e "$goop" ]; then
		echo "W: no such file \"$goop\"."
		shift
		goop=$1
		continue
	fi

	if [ -e "$goop_file_dest" ]; then

		i=1
		new_goop_file_dest="$goop_file_dest"
		while [ -e "$new_goop_file_dest" ]; do
			new_goop_file_dest=${goop_file_dest}___$i
			: $((i=i+1))
		done
		echo "W: file \"$goop_file_dest\" already exsists, using \"$new_goop_file_dest\"."
		goop_file_dest=$new_goop_file_dest
	fi

	mv "$goop" "$goop_file_dest" || {
		echo "E: failed to move goop \"$goop\" to goop dest \"$goop_file_dest\"." >&2
		echo "T: maintain a list of failures." >&2
	}

	append_to_file "$goop_action_log" "mv $goop $goop_file_dest"
	echo "$file_attrs" > "$goop_file_dest.stat"
	echo "$origin"     > "$goop_file_dest.origin"

	shift
	goop="$1"
done
) 9>"$goop_dest_lock" || {
	echo "F: could not lock \"$goop_dest_lock\", is another goop gooping?" >&2
}
