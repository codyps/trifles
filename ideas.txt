
* Garmin updater
  - _appears_ to be a matter of retreving the proper files from garmin's
    server, droping them in the right place, asking the user to restart the
    device occasionally (it appears there is a way to run code on boot), and
    repeat.

* password sync
  - firefox and chrome both have "secret" syncronization built in.
  - but we can't get at those secrets from the command line.
  - can we build a command line tool to access them?
  - Issues:
    - authentication in chrome is potentially a google webpage login flow,
      meaning we need the webbrowser.
    - for FF, it appears to be custom.

* Fix the pain that is multilib
 - triplets defining ABI suck, people can configure things so they lie
 - ABI being changed by arbitrary (undifferentiated) compiler flags is not
   good
 - triplets defining what tools to use suck, prefix definitions are more
   flexible
 - no standard way to determine
   - what multilib "targets" a compiler supports (gcc has -print-multi-*)
   - what the meaning of it's "default" multilib target is
   - where to put libraries built for a particular multilib (glibc and gcc
     have different ideas)
   - what compiler options change ABI
 - Automated way to build libs for all (or a subset of) multi-libs would be
   useful.

* Tooling and Testing
 - 'mock' for non-rpm distros (build packages in chroots)
 - 'koji' for non-fedora distros (distributed build system)

* arch linux package tools:
  - autobuilder: use a VM or Container to automatically build pkgbuilds
  - update checker: check PKGBUILDs for updates. Potentially automatically
    tweak. Gentoo has an upstream checker that could be imitated/extended.

* unlikely() and likely() that take probabilities.
  Even better: if they can be given an equation for probability that an
  expresion equals a range of values. Then, of course, a compiler to use that
  info.

* Non-blocking snmp library. (net-snmp does not work for this, see multicast
  fail). Also, potentially split the message sending from the message
  serialization/deserialization.

* config file library with the following features:
  - can programmatically modify config files
  - allows embedded shell/enough variable use to approximate it and avoid the
    need for generating the config files on a per system basis.
  - command line tools for interaction via shell scripts

* Decent opensource CAM program

* Model updates to datastructures as modifications followed by a "commit"
  - avoids the pain of figuring out manually which magical functions need to
    be called when certain fields are updated (see linux's online_pages() for
    an example).

* vpn that bootstraps via a DHT (bittorrent dht, for example)

* vpn/generic acceptance of new nodes via ssh-like or ff-sync-like mechanism.

* irc-tunnel - transmit ip/ethernet packets using an IRC server as the middle
  man
  - hillarious, but totally impractical (IRC is often blocked, I image sane
    servers will do rate limiting).

* a way to create a git repo with the history of a subset of the original
  files, and allow updating of this repo incrimentally.
  - `git filter-branch` can do the first part, but is _very_ slow.

* inotify_add_watch_at() syscall

* irc client library (for writing bots, bouncers, and the client-side of servers)

* live updated disk space usage display using inotify.

* per application hugepage pools
  - really just "generic" huge page pools into which hugepages of multiple
    sizes can be allocated (ie: set a min&max for each size of hugepage for
each pool) + some ruleset to decide which pool applications take from
(iptables-like?)
  - cgroups?

* filters
 - escape regex
 - escape shell
 - urlencode
 - urldecode

* OS interface
 - define a object/structure model for how the kernel operates
 - allow userspace programs to provide byte code which modifies/updates the
   currect in-kernel model
 - "only 1 syscall"

 - On Webcam Driver API
   - create a specification of how options (resolutions, framerates)
     can be combined
   - process it to some binary form
   - generate verification of parameters from the specification of their
     interaction
   - pass the same specification to user space so it has a full understanding
     of the requirements (and doesn't have to probe).

* power tracking daemon like upower without the dep on
  polkit (and that saves history to disk)

* pink noise producing program , just hack up the speaker-test code

* serialization language that can specify arbitrary protocol types

* version comparison & extraction shell utility and C library.
	my_ver = 1.3
	test_version $my_ver -lt 1.3-rc2
		false
	test "`version --minor $my_ver`" = 3
		true
  - Most distros have a spec for version numbers, to what extent are they
    compatable?

* a better dtls lib than tinydtls
  - factor out peer lookups, memory allocations
  - keep minimal, where minimal = appropriate for cortex-m sized machines

* efficient bitcoin/namecoin daemon.
  - maintaining 2 seperate daemons based on the same proto & sharing many
    common parts is bad.
  - Make some type of pluggable system for supporting a variety of *coin type
    P2P protocols.

* gdb - enable expantion of inline funtions when debugging.
  - potentially encode them in the same way as macros
  - also needs support for "({ stuff; })" expressions.

* sn [SecureNetwork] - ssh that can handle tempermental connections
  - mosh bootstraps on ssh & impliments some annoying scroll magic.
  - requirements:
    - automatically reconnects on connection "loss"
    - can reliably maintain a background connection with no lag to terminal
      when that connection has been lost and a shell is requested
  - Can we form it as a generic security protocol that uses a common pipeline
    for data?

* goop - push files into it, and it organizes them for you.
  - uses some 'tags' you apply at the time you add the files.
  - trivial to add new 'tags'.
  - can completely reprocess it's file store.

* trashdrive - dropbox clone

* bsnap - backups that work
  - can sanely handle "scheduling" of snapshots around storage device
    avaliability.
  - can use a daemon to track file changes & make snapshotting more efficient.
  - deduplicating
  - compressed
  - attempt to split along the same byte boundaries
  - keeps "snapshots" which can be removed independently of other snapshots.
    ie: allows "3 hourly backups, 15 daily, 5 weekly", et c type setup.
  - Can maintain snapshots on a logarithmic type schedule instead of the
    typical tape style mentioned in the previous point.
  - Push & Pull style backups supported.
  - client/server with support for ssh as a transport mechanism
  - can track metadata on without requiring high privs (ie: can track source
    uids without needing root to store the backups)
  - potential: mapping of uids to usernames (might change on a new system
    where the backup is restored. Names are more important than UIDs).

* goop & trashdrive & bsnap could benefit from some type of deduplicating backing
  store
  - mechanizm to balance a storage tree while having the most recently/heavily
    used item rise to the top (and thus be quicker to access)
  - Doing this means that we want heavily accessed items spread out in the
    tree.
  - Conversely, on the storage media, heavily used items may want to be
    grouped (ie: typically accessed together).

--------

* an NFS server which uses disk images as it's input.
  - allows the server to serve device files while not needing the perms to
    make actual device files.
  - useful for testing kernels.
  - disk images vs tar: disk images are writable. Otherwise tar would be a
    decent idea. Perhaps tar + some delta format? Or even better xattrs/a db/
some special files to track permisions in a normal folder structure.
  - qemu metadata passthrough format (used for virtio).
  - need rw file system drivers. :(
  - feels like those type of things should be library code at this point
  - grub2 builds their fs drivers as grub2 modules _and_ fuse drivers, but
    they are Read Only.

* a system for building single system images (ie: something like openwrt or
  buildroot)

  - Seperate enabling packages from configuring said packages from configuring
    the system
  - Use simple text files which are easilly editiable.
  - Provide command line tools to build these files incimentally. This allows
    us to support the mindset people have when installing software on typical
    running systems, as well as matching the reality that the config will not
    be correct first, it will require changes (which we provide tools to
    ease).
  - Is a graphical configurator (ala openwrt & buildroot) appropriate?

  - How do openembedded & the others handle this?

* issues system

* continuous integration system -
  runs locally.
  handles multiple sources & build variants for the same "project".
  sources: git on local file system only. If you want to use a remote,
	   you can rig an auto syncronization.
	   composed of "path branch" or "path refname".
  triggers: inotify on relevent files in $PROJ/.git for the watched refs.
  build instructions: scripts.
  build variants: a single option passed to the build instr. that it uses to
	   determine the type of build to create
  configuration: single file, awk style.

  alternate conf: use a dir for each project. use symlinks (or the actual repo that you can
push to) to specify the sources [they could either have a special prefix
marking them as sources, or we could assume all the directories are sources].
Have a particular name for the build script. Have a file containing newline
seperated build variants.

* keyboard profiler -
  a program which can determine the limitations (wrt key rollover) of the
  keyboard being used. By guiding the user through a series of combination
  keypresses and detecting the ones recived, profiling the keyboard should be
  possible.

* An interface to pass 'secrets' from the bootloader to the loaded operating
  system (for use with disk encryption).

* Subpixel Rendering + Multiple Monitors is completely broken on Linux. Fix
  it. (This makes subpixel rendering + monitor rotation almost always a
  no-go).

* screensaver/suspend which can properly suspend LUKs crypt mounts and prompt
  for re-entry of password

* imap client daemon with support for persistent connection, ie: "push"
* mail handling that doesn't suck
  - a graphical mail viewer that doesn't fetch mail
  - a mail storage format that is actually safe.
  - IMAP like protocol that can understand having the same message in
    multiple places (labels)
    - At the end of the day, what is IMAP, really? And what are we using it
      as? Right now it seems like it is syncronization for structured data
      with some extra goop about imutability and unique ids thrown in.
    - Is this necessary? Useful?
    - What happens when 2 (writers) clients are acting on 2 different local
      mail stores syncronized via IMAP?
  - offlineimap is crashy

* Screen saver and suspend to ram (pm-suspend) integration with cryptsetup suspend.
  i3lock seems like a good candidate (while lacking a timeout daemon)
  - using i3lock + xautolock right now. Not quite perfect (i3lock doesn't turn
    the screen off after mouse movement).

* A way to run per-user actions on various events such as suspend, poweroff,
  "Lock", "idle"

* pam+luks integration: prompt for user and password. allow selected
  user+password pairs to decrypt. auto login. essentially, mac stuff.

* generic keyring (without gnome) for linux. allow for access via arbitrary
  interfaces (not limited to dbus)

* Offline decryption of gnome-keyring keyrings.

* Image (pixel) editor for the frame buffer
	SDL (for cross platform) or DirectFB

* bytes:: binary object format convertion: srec - ihex - bin - various IFI formats

* ssh -R & -L without GatewayPorts enabled. Can easily be run on the remote
	host.

* CRC magic
	* algebraic simplification.
	* polynomial %error curve determination.

* Python deompiler

* icc profile loader that can use `{g,r,b}TRC' when lacking `vcgt'
  current icc profile loaders:
   - dispwin (argyllcms): nice enough to show errors when it can't use the icc
   - xcalib: never shows an error even when it fails horribly.
  icc specs: http://www.color.org/icc_specs2.xalter
  libs:
   - libicc (argyllcms)
   - SampleICC (color.org), C++

* command line ADC client
  protocol docs: http://adc.sourceforge.net/ADC.html
  Could use the `it's all files' style for the backend, one could write a
  ncurses frontend if needed.
  name: `u[a]dcc' -- micro direct connect client
  - dctc (exsisting text client for DC proto, no ADC), microdc, microdc2
    (built on top of dcpp libs), cccp, valknut, dc++
  Alt: make dc++ a client/server application (so that downloads and logs can
  be maintained on a more permenent server like host while gui can show up on
  portable devices).

* Decent note taking.
	* gpg encryption
	* all stored as plain text (or retrevable as such)
	* versioning (now it seems like I should write a front end on git to
	  impliment this)
        * some type of structure to allow the formation of a graph. ie: we
          want links and back-links
  'note' writen in perl, supports encryption.
  	* cmdline options not documented (as far as I could see)
	* interactive thing not too fun (i'd prefer `note add [note name]` or
	  some such)
	* defualts to binary storage, no 'show' command visible (can edit and
	  save somewhere else)
  'devtodo': written towards todo list tracking, not general note taking.
  	* nice interface
  'hnb': single tree of short notes.

===============================================================================

* command line driven torrent metadata editor.
  'torrentinfo' - command line metadata viewer in python.
  http://wiki.theory.org/BitTorrentSpecification
    describes format and gives links to code to read it.
  bencoding:
    byte strings: <strlen in ascii base 10>:<strdata>
    lists: l<items>e
    int: i<int ascii base 10>e
    dict: d<bencoded str><bencoded elem>e
  editing in vim possible, with careful keystrokes.
  added 'tracker_modify.pl', which does what I need.
  --
  -- 'rwt' [partially] writen an on github.

* FSEvents for linux

* an "offload" file system: layer2 fs (fs on top of fs) which pushes files
  from one device to another while transparrently providing access to the
  files whether they have been pushed or not.

  - pause/resume: If the external (the device being pushed to) needs to be
    disconnected, there should be a way to signal the 'offfs' to stop using the
    destination fs, and then indicate again when that fs has been added again
    (auto detect? same path or different path when replugged? track UUIDs of
    blk devices?)

* ALSA outputs runtime configurable.
  - take advantage of same stuff alsa equalizer (name?) uses to have alsamixer
    apply dynamic eq.

* Match headphone frequency responce via equalization.
  - How do we handle finding a baseline? If we use a microphone that
    microphone will have some frequency response.
  - Can we use the headphones themselves to do the recording?
    - Play from 1 and record from the other
  - How similar are the recording & playback responce frequencies of a pair of
    speakers?
