* imap client daemon with support for persistent connection, ie: "push"

* Screen saver and suspend to ram (pm-suspend) integration with cryptsetup suspend.
  i3 seems like a good candidate (while lacking a timeout daemon)

* pam+luks integration: prompt for user and password. allow selected
  user+password pairs to decrypt. auto login. essentially, mac stuff.

* generic keyring (without gnome) for linux. allow for access via arbitrary
  interfaces (not limited to dbus)

* Offline decryption of gnome-keyring keyrings.

* Image (pixel) editor for the frame buffer
	SDL (for cross platform) or DirectFB

* bytes:: binary object format convertion: srec - ihex - bin - various IFI formats

* ssh -R & -L without GatewayPorts enabled. Can easily be run on the remote
	host.

* CRC magic
	* algebraic simplification.
	* polynomial %error curve determination.

* Python deompiler

* icc profile loader that can use `{g,r,b}TRC' when lacking `vcgt'
  current icc profile loaders:
   - dispwin (argyllcms): nice enough to show errors when it can't use the icc
   - xcalib: never shows an error even when it fails horribly.
  icc specs: http://www.color.org/icc_specs2.xalter
  libs:
   - libicc (argyllcms)
   - SampleICC (color.org), C++

* command line ADC client
  protocol docs: http://adc.sourceforge.net/ADC.html
  Could use the `it's all files' style for the backend, one could write a
  ncurses frontend if needed.
  name: `u[a]dcc' -- micro direct connect client
  - dctc (exsisting text client for DC proto, no ADC), microdc, microdc2
    (built on top of dcpp libs), cccp, valknut, dc++
  Alt: make dc++ a client/server application (so that downloads and logs can
  be maintained on a more permenent server like host while gui can show up on
  portable devices).

* Decent note taking.
	* gpg encryption
	* all stored as plain text (or retrevable as such)
	* versioning (now it seems like I should write a front end on git to
	  impliment this
  'note' writen in perl, supports encryption.
  	* cmdline options not documented (as far as I could see)
	* interactive thing not too fun (i'd prefer `note add [note name]` or
	  some such
	* defualts to binary storage, no 'show' command visible (can edit and
	  save somewhere else
  'devtodo': written towards todo list tracking, not general note taking.
  	* nice interface
  'hnb': single tree of short notes.

===============================================================================

* command line driven torrent metadata editor.
  'torrentinfo' - command line metadata viewer in python.
  http://wiki.theory.org/BitTorrentSpecification
    describes format and gives links to code to read it.
  bencoding:
    byte strings: <strlen in ascii base 10>:<strdata>
    lists: l<items>e
    int: i<int ascii base 10>e
    dict: d<bencoded str><bencoded elem>e
  editing in vim possible, with careful keystrokes.
  added 'tracker_modify.pl', which does what I need.
  --
  -- 'rwt' [partially] writen an on github.

* FSEvents for linux

* an "offload" file system: layer2 fs (fs on top of fs) which pushes files
  from one device to another while transparrently providing access to the
  files whether they have been pushed or not.

  - pause/resume: If the external (the device being pushed to) needs to be
    disconnected, there should be a way to signal the 'offfs' to stop using the
    destination fs, and then indicate again when that fs has been added again
    (auto detect? same path or different path when replugged? track UUIDs of
    blk devices?)

* ALSA outputs runtime configurable.

* Match headphone frequency responce via equalization.
