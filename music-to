#! /bin/bash
set -eu -o pipefail

usage() {
	cat >&2 <<EOF
usage: $0 -h
usage: $0 [-fP] DEST_DIR SRC_DIR
usage: $0 -X DEST_DIR SRC_DIR FILE_IN_SRC[...]

flags:
	-f	use find instead of direct iteration
	-P	use parallel execution (via \`parallel\` or \`xargs\`)
	-k	keep top level SRC_DIR inside DEST_DIR (useful if calling on a
		single album dir)
	-X	convert exactly these files (used internally)
	-n	dry run
	-jN	use N parallel executions (default is NUM_PROCS)
	-h	show help
EOF
	exit "$1"
}

info() {
	echo "I: $*"
}

# $1 = string
# $2 = prefix
remove_prefix() {
	local s="$1"
	local prefix="$2"
	case "$s" in
	"$prefix")
		echo "${s}"
		;;
	"$prefix"/*)
		echo "${s:$((${#prefix} + 1))}"
		;;
	*)	>&2 echo "not a prefix: $s $prefix"; exit 1 ;;
	esac

}

abspath() {
	local p="$1"
	case "$p" in
	/*)	echo "$p" ;;
	./*)	echo "$PWD${p:1}" ;;
	*)	echo "$PWD/${p}" ;;
	esac
}

show() {
	for i in "$@"; do
		printf "'%s' " "${i/\'/\'\\\'\'}"
	done
	printf "\n"
}

run() {
	show "$@"
	if ! $dry_run; then
		"$@"
	fi
}

conv_one() {
	local dest_dir="$1"
	local f="$2"

	case "$f" in
	*.mp3|*.m4a)
		if ! $mkdir_done; then
			mkdir_p "$dest_dir"
			mkdir_done=true
		fi
		run cp -f "$f" "$dest_dir"
		;;
	*.flac|*.dsf|*.shn)
		local non_ext="${f%.*}"
		local R="$dest_dir/$(basename "$non_ext" | iconv -f UTF-8 -t ASCII//TRANSLIT).m4a"
		if ! $mkdir_done; then
			mkdir_p "$dest_dir"
			mkdir_done=true
		fi
		# XXX: consider preserving 48k (downsample to 48k, avoid upsampling)
		current_rate=$(ffprobe "$f" 2>&1 | awk '/Stream #0:0/ { print $5 }')
		rate_arg=""
		if [ -z "$current_rate" ]; then
			>&2 echo "ERROR: could not determine rate for $f"
			exit 1
		fi
		# TODO: validate that it is a number
		if [ "$current_rate" -gt 48000 ]; then
			rate_arg="-ar 48000"
		fi
		run ffmpeg -hide_banner -y -i "$f" -c:a libfdk_aac -cutoff 18000 -b:a 192k $rate_arg -ac 2 -vn "$R"
		;;
	*.log|*.[cC][uU][eE]|*.svf|*.md5|*.txt|*.[Jj][Pp][Gg]|*.m3u8|*.st5|*.png|*.ffp)
		# known don't cares
		;;
	*)	# skipping. consider if other file times are good to handle
		;;
	esac
}

# A conv_one intended for execution via `find`
conv_one_x() {
	local DEST_DIR="$1"
	info "DEST_DIR=$SRC_DIR"
	local SRC_DIR="$2"
	info "SRC_DIR=$SRC_DIR"
	local f="$3"
	info "f=$f"
	local src_dir="$(dirname "$f")"
	info "src_dir: $src_dir"
	local dest_dir="$DEST_DIR$(remove_prefix "$src_dir" "$SRC_DIR")"
	info "dest_dir: $dest_dir"
	local mkdir_done=true
	run mkdir -p "$dest_dir"

	#>&2 echo "FFFFF: $f"
	conv_one "$dest_dir" "$f"
}

# $1 = dir
do_path() {
	local src_dir="$1"
	local dest_dir="$DEST_DIR$(remove_prefix "$src_dir" "$SRC_DIR")"
	local mkdir_done=false

	for f in "$src_dir"/*; do
		if [ -d "$f" ]; then
			do_path "$f"
		elif [ -f "$f" ]; then
			conv_one "$dest_dir" "$f"
		fi
	done
}

do_path_fe() {
	local x="$(abspath "$0")"
	local dr_arg=""
	if $dry_run; then
		dr_arg="-n"
	fi
	find "$1" \( -type f \( \
		-name '*.flac' -or -name '*.dsf' -or \
		-name '*.mp3' -or -name '*.m4a' -or \
		-name '*.shn' \) \) \
		-exec "$x" "-X" $dr_arg "$DEST_DIR" "$SRC_DIR" \{\} \+
}

probe_parallel() {
	HAVE_XARGS=false
	HAVE_PARALLEL=false
	if type parallel 2>/dev/null; then
		HAVE_PARALLEL=true
	elif type xargs 2>/dev/null; then
		HAVE_XARGS=true
		if [ -z "$NUM_PROCS" ]; then
			NUM_PROCS=$(getconf _NPROCESSORS_ONLN)
		fi
	fi

	>&2 echo "HAVE_XARGS=$HAVE_XARGS"
	>&2 echo "HAVE_PARALLEL=$HAVE_PARALLEL"
	: ${USE_PARALLEL:=$HAVE_PARALLEL}
	: ${USE_XARGS:=$HAVE_XARGS}
}

do_parallel_x() {
	if $USE_PARALLEL; then
		np_arg=
		if [ -n "$NUM_PROCS" ]; then
			np_arg="-j$NUM_PROCS"
		fi

		parallel -0 $np_arg -m "$@"
	elif $USE_XARGS; then
		xargs -0 -n 1 -P "${NUM_PROCS}" "$@"
	else
		>&2 echo "ERROR: no parallel mechanism found"
		exit 1
	fi
}

do_path_fp() {
	local dr_arg=""
	if $dry_run; then
		dr_arg="-n"
	fi
	probe_parallel
	find "$1" \( -type f \( \
		-name '*.flac' -or -name '*.dsf' -or \
		-name '*.mp3' -or -name '*.m4a' -or \
		-name '*.shn' \) \) \
		-print0 | \
		do_parallel_x "$0" "-X" $dr_arg "$DEST_DIR" "$SRC_DIR"
}

mkdir_p() {
	if ! [ -e "$1" ]; then
		run mkdir -p "$1"
	fi
}

use_find=false
use_parallel=false
convert_one=false
keep_top_level_dir=false
dry_run=false
: ${NUM_PROCS:=}

optstr="hkfPXnj:"

while getopts "$optstr" opt; do
	case "$opt" in
	h) usage 0;;
	f) use_find=true;;
	P) use_parallel=true;;
	X) convert_one=true;;
	k) keep_top_level_dir=true;;
	n) dry_run=true;;
	j) NUM_PROCS="$OPTARG";;
	\?) usage 1;;
	*)
		>&2 echo "PROGRAMMING BUG: opt=$opt, OPTIND=$OPTIND"
		exit 1;;
	esac
done
shift "$((OPTIND-1))"

if $convert_one && ! [ $# -ge 3 ]; then
	>&2 echo "-X requires 3 or more args (got $#)"
	usage 1
fi
if ! $convert_one && ! [ $# -eq 2 ]; then
	>&2 echo "requires 2 args (got $#)"
	usage 1
fi

DEST_DIR="$1"
SRC_DIR="$2"
shift 2

# ensure dest has slash on it
DEST_DIR="${DEST_DIR%/}/"

if ! [ -d "$DEST_DIR" ]; then
	>&2 echo "DEST_DIR='$DEST_DIR' does not exist"
	exit 1
fi

if ! [ -d "$SRC_DIR" ]; then
	>&2 echo "SRC_DIR='$SRC_DIR' does not exist"
	exit 1
fi

if $keep_top_level_dir; then
	NEW_DEST_DIR="$DEST_DIR/$(basename "$SRC_DIR")/"
	#info "keep top level: $DEST_DIR -> $NEW_DEST_DIR"
	DEST_DIR="$NEW_DEST_DIR"
	mkdir_p "$DEST_DIR"
fi

if $convert_one; then
	>&2 echo "CONV ONE"
	>&2 echo "DEST_DIR: $DEST_DIR"
	>&2 echo "SRC_DIR: $SRC_DIR"
	for v in "$@"; do
		conv_one_x "$DEST_DIR" "$SRC_DIR" "$v"
	done
elif $use_find; then
	info "find mode"
	do_path_fe "$SRC_DIR"
elif $use_parallel; then
	info "parallel mode"
	do_path_fp "$SRC_DIR"
else
	info "internal iteration mode"
	do_path "$SRC_DIR"
fi
