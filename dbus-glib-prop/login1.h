/*
 * Generated by gdbus-codegen 2.42.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LOGIN1_H__
#define __LOGIN1_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Manager */

#define LOGIN1_TYPE_MANAGER (login1_manager_get_type ())
#define LOGIN1_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGIN1_TYPE_MANAGER, login1Manager))
#define LOGIN1_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGIN1_TYPE_MANAGER))
#define LOGIN1_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LOGIN1_TYPE_MANAGER, login1ManagerIface))

struct _login1Manager;
typedef struct _login1Manager login1Manager;
typedef struct _login1ManagerIface login1ManagerIface;

struct _login1ManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_activate_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_activate_session_on_seat) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  gboolean (*handle_attach_device) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2);

  gboolean (*handle_can_hibernate) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_hybrid_sleep) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_power_off) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot_to_firmware_setup) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_suspend) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_cancel_scheduled_shutdown) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_create_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    const gchar *arg_unnamed_arg4,
    const gchar *arg_unnamed_arg5,
    const gchar *arg_unnamed_arg6,
    guint arg_unnamed_arg7,
    const gchar *arg_unnamed_arg8,
    const gchar *arg_unnamed_arg9,
    gboolean arg_unnamed_arg10,
    const gchar *arg_unnamed_arg11,
    const gchar *arg_unnamed_arg12,
    GVariant *arg_unnamed_arg13);

  gboolean (*handle_flush_devices) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_get_seat) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_session_by_pid) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_get_user) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_get_user_by_pid) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_hibernate) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_hybrid_sleep) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_inhibit) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3);

  gboolean (*handle_kill_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gint arg_unnamed_arg2);

  gboolean (*handle_kill_user) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0,
    gint arg_unnamed_arg1);

  gboolean (*handle_list_inhibitors) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_seats) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_sessions) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_users) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_lock_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_lock_sessions) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_power_off) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_reboot) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_release_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_schedule_shutdown) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    guint64 arg_unnamed_arg1);

  gboolean (*handle_set_reboot_to_firmware_setup) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_set_user_linger) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2);

  gboolean (*handle_suspend) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_terminate_seat) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_terminate_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_terminate_user) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_unlock_session) (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_unlock_sessions) (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_block_inhibited) (login1Manager *object);

  const gchar * (*get_delay_inhibited) (login1Manager *object);

  gboolean  (*get_docked) (login1Manager *object);

  gboolean  (*get_enable_wall_messages) (login1Manager *object);

  const gchar * (*get_handle_hibernate_key) (login1Manager *object);

  const gchar * (*get_handle_lid_switch) (login1Manager *object);

  const gchar * (*get_handle_lid_switch_docked) (login1Manager *object);

  const gchar * (*get_handle_power_key) (login1Manager *object);

  const gchar * (*get_handle_suspend_key) (login1Manager *object);

  guint64  (*get_holdoff_timeout_usec) (login1Manager *object);

  const gchar * (*get_idle_action) (login1Manager *object);

  guint64  (*get_idle_action_usec) (login1Manager *object);

  gboolean  (*get_idle_hint) (login1Manager *object);

  guint64  (*get_idle_since_hint) (login1Manager *object);

  guint64  (*get_idle_since_hint_monotonic) (login1Manager *object);

  guint64  (*get_inhibit_delay_max_usec) (login1Manager *object);

  const gchar *const * (*get_kill_exclude_users) (login1Manager *object);

  const gchar *const * (*get_kill_only_users) (login1Manager *object);

  gboolean  (*get_kill_user_processes) (login1Manager *object);

  guint  (*get_nauto_vts) (login1Manager *object);

  gboolean  (*get_preparing_for_shutdown) (login1Manager *object);

  gboolean  (*get_preparing_for_sleep) (login1Manager *object);

  gboolean  (*get_reboot_to_firmware_setup) (login1Manager *object);

  GVariant * (*get_scheduled_shutdown) (login1Manager *object);

  const gchar * (*get_wall_message) (login1Manager *object);

  void (*prepare_for_shutdown) (
    login1Manager *object,
    gboolean arg_unnamed_arg0);

  void (*prepare_for_sleep) (
    login1Manager *object,
    gboolean arg_unnamed_arg0);

  void (*seat_new) (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*seat_removed) (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*session_new) (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*session_removed) (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*user_new) (
    login1Manager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*user_removed) (
    login1Manager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

};

GType login1_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *login1_manager_interface_info (void);
guint login1_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void login1_manager_complete_get_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void login1_manager_complete_get_session_by_pid (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void login1_manager_complete_get_user (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void login1_manager_complete_get_user_by_pid (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void login1_manager_complete_get_seat (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void login1_manager_complete_list_sessions (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void login1_manager_complete_list_users (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void login1_manager_complete_list_seats (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void login1_manager_complete_list_inhibitors (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void login1_manager_complete_create_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg14,
    const gchar *unnamed_arg15,
    const gchar *unnamed_arg16,
    GVariant *unnamed_arg17,
    guint unnamed_arg18,
    const gchar *unnamed_arg19,
    guint unnamed_arg20,
    gboolean unnamed_arg21);

void login1_manager_complete_release_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_activate_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_activate_session_on_seat (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_lock_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_unlock_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_lock_sessions (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_unlock_sessions (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_kill_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_kill_user (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_terminate_session (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_terminate_user (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_terminate_seat (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_set_user_linger (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_attach_device (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_flush_devices (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_power_off (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_reboot (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_suspend (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_hibernate (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_hybrid_sleep (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_can_power_off (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void login1_manager_complete_can_reboot (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void login1_manager_complete_can_suspend (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void login1_manager_complete_can_hibernate (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void login1_manager_complete_can_hybrid_sleep (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void login1_manager_complete_schedule_shutdown (
    login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_cancel_scheduled_shutdown (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg0);

void login1_manager_complete_inhibit (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg4);

void login1_manager_complete_can_reboot_to_firmware_setup (
    login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void login1_manager_complete_set_reboot_to_firmware_setup (
    login1Manager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void login1_manager_emit_session_new (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void login1_manager_emit_session_removed (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void login1_manager_emit_user_new (
    login1Manager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void login1_manager_emit_user_removed (
    login1Manager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void login1_manager_emit_seat_new (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void login1_manager_emit_seat_removed (
    login1Manager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void login1_manager_emit_prepare_for_shutdown (
    login1Manager *object,
    gboolean arg_unnamed_arg0);

void login1_manager_emit_prepare_for_sleep (
    login1Manager *object,
    gboolean arg_unnamed_arg0);



/* D-Bus method calls: */
void login1_manager_call_get_session (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_get_session_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_get_session_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_get_session_by_pid (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_get_session_by_pid_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_get_session_by_pid_sync (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_get_user (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_get_user_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_get_user_sync (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_get_user_by_pid (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_get_user_by_pid_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_get_user_by_pid_sync (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_get_seat (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_get_seat_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_get_seat_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_list_sessions (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_list_sessions_finish (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_list_sessions_sync (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_list_users (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_list_users_finish (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_list_users_sync (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_list_seats (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_list_seats_finish (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_list_seats_sync (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_list_inhibitors (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_list_inhibitors_finish (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_list_inhibitors_sync (
    login1Manager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_create_session (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    const gchar *arg_unnamed_arg4,
    const gchar *arg_unnamed_arg5,
    const gchar *arg_unnamed_arg6,
    guint arg_unnamed_arg7,
    const gchar *arg_unnamed_arg8,
    const gchar *arg_unnamed_arg9,
    gboolean arg_unnamed_arg10,
    const gchar *arg_unnamed_arg11,
    const gchar *arg_unnamed_arg12,
    GVariant *arg_unnamed_arg13,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_create_session_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg14,
    gchar **out_unnamed_arg15,
    gchar **out_unnamed_arg16,
    GVariant **out_unnamed_arg17,
    guint *out_unnamed_arg18,
    gchar **out_unnamed_arg19,
    guint *out_unnamed_arg20,
    gboolean *out_unnamed_arg21,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_create_session_sync (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    const gchar *arg_unnamed_arg4,
    const gchar *arg_unnamed_arg5,
    const gchar *arg_unnamed_arg6,
    guint arg_unnamed_arg7,
    const gchar *arg_unnamed_arg8,
    const gchar *arg_unnamed_arg9,
    gboolean arg_unnamed_arg10,
    const gchar *arg_unnamed_arg11,
    const gchar *arg_unnamed_arg12,
    GVariant *arg_unnamed_arg13,
    gchar **out_unnamed_arg14,
    gchar **out_unnamed_arg15,
    gchar **out_unnamed_arg16,
    GVariant **out_unnamed_arg17,
    guint *out_unnamed_arg18,
    gchar **out_unnamed_arg19,
    guint *out_unnamed_arg20,
    gboolean *out_unnamed_arg21,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_release_session (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_release_session_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_release_session_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_activate_session (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_activate_session_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_activate_session_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_activate_session_on_seat (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_activate_session_on_seat_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_activate_session_on_seat_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_lock_session (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_lock_session_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_lock_session_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_unlock_session (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_unlock_session_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_unlock_session_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_lock_sessions (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_lock_sessions_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_lock_sessions_sync (
    login1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_unlock_sessions (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_unlock_sessions_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_unlock_sessions_sync (
    login1Manager *proxy,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_kill_session (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gint arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_kill_session_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_kill_session_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gint arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_kill_user (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    gint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_kill_user_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_kill_user_sync (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    gint arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_terminate_session (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_terminate_session_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_terminate_session_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_terminate_user (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_terminate_user_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_terminate_user_sync (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_terminate_seat (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_terminate_seat_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_terminate_seat_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_set_user_linger (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_set_user_linger_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_set_user_linger_sync (
    login1Manager *proxy,
    guint arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_attach_device (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_attach_device_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_attach_device_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_flush_devices (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_flush_devices_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_flush_devices_sync (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_power_off (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_power_off_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_power_off_sync (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_reboot (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_reboot_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_reboot_sync (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_suspend (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_suspend_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_suspend_sync (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_hibernate (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_hibernate_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_hibernate_sync (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_hybrid_sleep (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_hybrid_sleep_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_hybrid_sleep_sync (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_power_off (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_power_off_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_power_off_sync (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_reboot (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_reboot_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_reboot_sync (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_suspend (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_suspend_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_suspend_sync (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_hibernate (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_hibernate_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_hibernate_sync (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_hybrid_sleep (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_hybrid_sleep_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_hybrid_sleep_sync (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_schedule_shutdown (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    guint64 arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_schedule_shutdown_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_schedule_shutdown_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    guint64 arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_cancel_scheduled_shutdown (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_cancel_scheduled_shutdown_finish (
    login1Manager *proxy,
    gboolean *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_cancel_scheduled_shutdown_sync (
    login1Manager *proxy,
    gboolean *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_inhibit (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_inhibit_finish (
    login1Manager *proxy,
    GVariant **out_unnamed_arg4,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_inhibit_sync (
    login1Manager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    GVariant **out_unnamed_arg4,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_reboot_to_firmware_setup (
    login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_reboot_to_firmware_setup_finish (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_reboot_to_firmware_setup_sync (
    login1Manager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_set_reboot_to_firmware_setup (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_set_reboot_to_firmware_setup_finish (
    login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_set_reboot_to_firmware_setup_sync (
    login1Manager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean login1_manager_get_enable_wall_messages (login1Manager *object);
void login1_manager_set_enable_wall_messages (login1Manager *object, gboolean value);

const gchar *login1_manager_get_wall_message (login1Manager *object);
gchar *login1_manager_dup_wall_message (login1Manager *object);
void login1_manager_set_wall_message (login1Manager *object, const gchar *value);

guint login1_manager_get_nauto_vts (login1Manager *object);
void login1_manager_set_nauto_vts (login1Manager *object, guint value);

const gchar *const *login1_manager_get_kill_only_users (login1Manager *object);
gchar **login1_manager_dup_kill_only_users (login1Manager *object);
void login1_manager_set_kill_only_users (login1Manager *object, const gchar *const *value);

const gchar *const *login1_manager_get_kill_exclude_users (login1Manager *object);
gchar **login1_manager_dup_kill_exclude_users (login1Manager *object);
void login1_manager_set_kill_exclude_users (login1Manager *object, const gchar *const *value);

gboolean login1_manager_get_kill_user_processes (login1Manager *object);
void login1_manager_set_kill_user_processes (login1Manager *object, gboolean value);

gboolean login1_manager_get_reboot_to_firmware_setup (login1Manager *object);
void login1_manager_set_reboot_to_firmware_setup (login1Manager *object, gboolean value);

gboolean login1_manager_get_idle_hint (login1Manager *object);
void login1_manager_set_idle_hint (login1Manager *object, gboolean value);

guint64 login1_manager_get_idle_since_hint (login1Manager *object);
void login1_manager_set_idle_since_hint (login1Manager *object, guint64 value);

guint64 login1_manager_get_idle_since_hint_monotonic (login1Manager *object);
void login1_manager_set_idle_since_hint_monotonic (login1Manager *object, guint64 value);

const gchar *login1_manager_get_block_inhibited (login1Manager *object);
gchar *login1_manager_dup_block_inhibited (login1Manager *object);
void login1_manager_set_block_inhibited (login1Manager *object, const gchar *value);

const gchar *login1_manager_get_delay_inhibited (login1Manager *object);
gchar *login1_manager_dup_delay_inhibited (login1Manager *object);
void login1_manager_set_delay_inhibited (login1Manager *object, const gchar *value);

guint64 login1_manager_get_inhibit_delay_max_usec (login1Manager *object);
void login1_manager_set_inhibit_delay_max_usec (login1Manager *object, guint64 value);

const gchar *login1_manager_get_handle_power_key (login1Manager *object);
gchar *login1_manager_dup_handle_power_key (login1Manager *object);
void login1_manager_set_handle_power_key (login1Manager *object, const gchar *value);

const gchar *login1_manager_get_handle_suspend_key (login1Manager *object);
gchar *login1_manager_dup_handle_suspend_key (login1Manager *object);
void login1_manager_set_handle_suspend_key (login1Manager *object, const gchar *value);

const gchar *login1_manager_get_handle_hibernate_key (login1Manager *object);
gchar *login1_manager_dup_handle_hibernate_key (login1Manager *object);
void login1_manager_set_handle_hibernate_key (login1Manager *object, const gchar *value);

const gchar *login1_manager_get_handle_lid_switch (login1Manager *object);
gchar *login1_manager_dup_handle_lid_switch (login1Manager *object);
void login1_manager_set_handle_lid_switch (login1Manager *object, const gchar *value);

const gchar *login1_manager_get_handle_lid_switch_docked (login1Manager *object);
gchar *login1_manager_dup_handle_lid_switch_docked (login1Manager *object);
void login1_manager_set_handle_lid_switch_docked (login1Manager *object, const gchar *value);

guint64 login1_manager_get_holdoff_timeout_usec (login1Manager *object);
void login1_manager_set_holdoff_timeout_usec (login1Manager *object, guint64 value);

const gchar *login1_manager_get_idle_action (login1Manager *object);
gchar *login1_manager_dup_idle_action (login1Manager *object);
void login1_manager_set_idle_action (login1Manager *object, const gchar *value);

guint64 login1_manager_get_idle_action_usec (login1Manager *object);
void login1_manager_set_idle_action_usec (login1Manager *object, guint64 value);

gboolean login1_manager_get_preparing_for_shutdown (login1Manager *object);
void login1_manager_set_preparing_for_shutdown (login1Manager *object, gboolean value);

gboolean login1_manager_get_preparing_for_sleep (login1Manager *object);
void login1_manager_set_preparing_for_sleep (login1Manager *object, gboolean value);

GVariant *login1_manager_get_scheduled_shutdown (login1Manager *object);
GVariant *login1_manager_dup_scheduled_shutdown (login1Manager *object);
void login1_manager_set_scheduled_shutdown (login1Manager *object, GVariant *value);

gboolean login1_manager_get_docked (login1Manager *object);
void login1_manager_set_docked (login1Manager *object, gboolean value);


/* ---- */

#define LOGIN1_TYPE_MANAGER_PROXY (login1_manager_proxy_get_type ())
#define LOGIN1_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGIN1_TYPE_MANAGER_PROXY, login1ManagerProxy))
#define LOGIN1_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOGIN1_TYPE_MANAGER_PROXY, login1ManagerProxyClass))
#define LOGIN1_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOGIN1_TYPE_MANAGER_PROXY, login1ManagerProxyClass))
#define LOGIN1_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGIN1_TYPE_MANAGER_PROXY))
#define LOGIN1_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOGIN1_TYPE_MANAGER_PROXY))

typedef struct _login1ManagerProxy login1ManagerProxy;
typedef struct _login1ManagerProxyClass login1ManagerProxyClass;
typedef struct _login1ManagerProxyPrivate login1ManagerProxyPrivate;

struct _login1ManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  login1ManagerProxyPrivate *priv;
};

struct _login1ManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType login1_manager_proxy_get_type (void) G_GNUC_CONST;

void login1_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
login1Manager *login1_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
login1Manager *login1_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void login1_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
login1Manager *login1_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
login1Manager *login1_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define LOGIN1_TYPE_MANAGER_SKELETON (login1_manager_skeleton_get_type ())
#define LOGIN1_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGIN1_TYPE_MANAGER_SKELETON, login1ManagerSkeleton))
#define LOGIN1_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOGIN1_TYPE_MANAGER_SKELETON, login1ManagerSkeletonClass))
#define LOGIN1_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOGIN1_TYPE_MANAGER_SKELETON, login1ManagerSkeletonClass))
#define LOGIN1_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGIN1_TYPE_MANAGER_SKELETON))
#define LOGIN1_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOGIN1_TYPE_MANAGER_SKELETON))

typedef struct _login1ManagerSkeleton login1ManagerSkeleton;
typedef struct _login1ManagerSkeletonClass login1ManagerSkeletonClass;
typedef struct _login1ManagerSkeletonPrivate login1ManagerSkeletonPrivate;

struct _login1ManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  login1ManagerSkeletonPrivate *priv;
};

struct _login1ManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType login1_manager_skeleton_get_type (void) G_GNUC_CONST;

login1Manager *login1_manager_skeleton_new (void);


G_END_DECLS

#endif /* __LOGIN1_H__ */
