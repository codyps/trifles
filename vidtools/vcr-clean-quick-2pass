#! /bin/bash
set -euf -o pipefail

if [ $# -ne 4 ]; then
	>&2 echo "usage: $(basename $0) <in-file> <out-base> <start-time> <to-time>"
	exit 1
fi

inf="$1"
shift
out_base="$1"
shift
start_seek="$1"
shift
to="$1"
shift

# 2:03:00 (in seconds)
video_time=$(((60*2+3)*60))
# 10GiB (in bits)
size_limit=$((10*1024*8192))
total_bitrate=$((size_limit/video_time))
# 384kbps
audio_bitrate=384

# add a spare 8kbps
video_bitrate=$((total_bitrate-audio_bitrate - 8))


echo "total_bitrate: $total_bitrate"
echo "video_bitrate: $video_bitrate"

# nlmeans is very slow, hqdn3d is a fast alternative, but does not denoise as effectively.

#exec ffmpeg -i "$inf" -filter:v "bwdif,nlmeans,scale=1920:trunc(1920/dar/2)*2" \
#		-c:v libx264 -preset slow -profile:v high10 -crf 18 -coder 1 -pix_fmt yuv420p -movflags +faststart -g 30 -bf 2 \
#		-c:a aac -b:a 384k -profile:a aac_low "$@"

enc_v_flags="-c:v libx264 -preset slow -tune grain -profile:v high10 -b:v ${video_bitrate}k -coder 1 -pix_fmt yuv420p -movflags +faststart -g 30 -bf 2"
enc_a_flags="-c:a aac -b:a ${audio_bitrate}k -profile:a aac_low"

#filter="[0:v] bwdif [deint]; [deint] nlmeans [nl]; [nl] scale=-2:1080[out_nl_1080p]"
#filter="bwdif,hqdn3d,scale=1920:trunc(1920/dar/2)*2"
filter="bwdif,hqdn3d,scale=1440:trunc(1440/dar/2)*2"

script_ex="_hqdn3d_1080p"

nice ffmpeg -y \
	-ss "$start_seek" -to "$to" -i "$inf" -filter:v "$filter" \
	-max_muxing_queue_size 9999 \
	$enc_v_flags \
	-pass 1 -an \
	-passlogfile "${out_base}${script_ex}" \
	-f mp4 /dev/null

exec nice ffmpeg -y \
	-ss "$start_seek" -to "$to" -i "$inf" -filter:v "$filter" \
	-max_muxing_queue_size 9999 \
	$enc_a_flags $enc_v_flags \
	-pass 2 \
	-passlogfile "${out_base}${script_ex}" \
	"${out_base}${script_ex}.mp4"
