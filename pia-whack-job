#! /usr/bin/env bash
#set -x
set -euf
cd /etc/pia
. ./account

timeout_timestamp() {
  date +"%c" --date='1 day' # Timestamp 24 hours
}

generateTokenResponse=$(curl -fsS -u "$PIA_USERNAME:$PIA_PASSWORD" \
  "https://www.privateinternetaccess.com/gtoken/generateToken")

if [ $(echo "$generateTokenResponse" | jq -r '.status') != "OK" ]; then
  >&2 echo "Could not authenticate with the login credentials provided!"
  exit 1
fi

PIA_TOKEN=$(echo "$generateTokenResponse" | jq -r '.token')
tokenExpiration=$(timeout_timestamp)
echo -e "PIA_TOKEN=$PIA_TOKEN"
echo "This token will expire in 24 hours, on $tokenExpiration."

serverlist_url='https://serverlist.piaservers.net/vpninfo/servers/v6'
all_region_data=$(curl -fsS "$serverlist_url" | head -1)


selectedRegion="NO"
regionData="$(echo "$all_region_data" | jq --arg REGION_ID "$selectedRegion" -r '.regions[] | select(.country==$REGION_ID)')"
if [ -z "$regionData" ]; then
	>&2 echo -e "The REGION_ID $selectedRegion is not valid."
	exit 1
fi

bestServer_meta_IP=$(echo "$regionData" | jq -r '.servers.meta[0].ip')
bestServer_meta_hostname=$(echo "$regionData" | jq -r '.servers.meta[0].cn')

set -x
WG_SERVER_IP=$(echo "$regionData" | jq -r '.servers.wg[0].ip')
WG_HOSTNAME=$(echo "$regionData" | jq -r '.servers.wg[0].cn')
set +x

echo "regionData: $regionData"

if [ -z "$WG_HOSTNAME" ]; then
	exit
fi

# Create ephemeral wireguard keys, that we don't need to save to disk.
privKey=$(wg genkey)
pubKey=$( echo "$privKey" | wg pubkey)

echo "Trying to connect to the PIA WireGuard API on $WG_SERVER_IP..."
set -x
wireguard_json="$(curl -fsS -G \
  --connect-to "$WG_HOSTNAME::$WG_SERVER_IP:" \
  --cacert "ca.rsa.4096.crt" \
  --data-urlencode "pt=${PIA_TOKEN}" \
  --data-urlencode "pubkey=$pubKey" \
  "https://${WG_HOSTNAME}:1337/addKey")"
set +x

# Check if the API returned OK and stop this script if it didn't.
if [ $(echo "$wireguard_json" | jq -r '.status') != "OK" ]; then
  >&2 echo -e "$WG_HOSTNAME/addKey failed. Stopping now."
  exit 1
fi

# Create the WireGuard config based on the JSON received from the API
# In case you want this section to also add the DNS setting, please
# start the script with PIA_DNS=true.
# This uses a PersistentKeepalive of 25 seconds to keep the NAT active
# on firewalls. You can remove that line if your network does not
# require it.
dnsServer=$(echo "$wireguard_json" | jq -r '.dns_servers[0]')
echo "Trying to set up DNS to $dnsServer. In case you do not have resolvconf,"
echo "this operation will fail and you will not get a VPN. If you have issues,"
echo "start this script without PIA_DNS."
echo
dnsSettingForVPN="DNS = $dnsServer"

cat <<EOF
# /etc/wireguard/pia.conf
[Interface]
Address = $(echo "$wireguard_json" | jq -r '.peer_ip')
PrivateKey = $privKey
$dnsSettingForVPN
[Peer]
PersistentKeepalive = 25
PublicKey = $(echo "$wireguard_json" | jq -r '.server_key')
AllowedIPs = 0.0.0.0/0
Endpoint = ${WG_SERVER_IP}:$(echo "$wireguard_json" | jq -r '.server_port')
EOF

#PIA_TOKEN=$PIA_TOKEN \
#  PF_GATEWAY=$WG_SERVER_IP \
#  PF_HOSTNAME=$WG_HOSTNAME \
#  ./port_forwarding.sh
